// This is your Prisma schema file for the e-commerce platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User related models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile
  profile       Profile?

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlists     Wishlist[]
  cart          Cart?

  // Auth
  accounts      Account[]
  sessions      Session[]

  @@index([email])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id          String    @id @default(cuid())
  bio         String?
  phoneNumber String?
  birthDate   DateTime?
  gender      Gender?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Product related models
model Product {
  id          String        @id @default(cuid())
  name        String
  description String        @db.Text
  price       Decimal       @db.Decimal(10, 2)
  comparePrice Decimal?     @db.Decimal(10, 2)
  sku         String        @unique
  barcode     String?       @unique
  quantity    Int          @default(0)
  status      ProductStatus @default(DRAFT)
  featured    Boolean       @default(false)
  isDigital   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  categories  CategoryProduct[]
  images      ProductImage[]
  variants    ProductVariant[]
  attributes  ProductAttribute[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]

  // Metadata
  metaTitle   String?
  metaDescription String?
  slug        String       @unique

  @@index([name])
  @@index([price])
  @@index([status])
  @@index([slug])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  slug        String    @unique
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Self-relation for hierarchical categories
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  // Relations
  products    CategoryProduct[]

  @@index([slug])
}

model CategoryProduct {
  productId   String
  categoryId  String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  url         String
  alt         String?
  position    Int      @default(0)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  sku         String   @unique
  name        String
  price       Decimal  @db.Decimal(10, 2)
  quantity    Int      @default(0)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Relations
  attributes  ProductVariantAttribute[]

  @@index([productId])
}

model ProductAttribute {
  id          String   @id @default(cuid())
  name        String
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Relations
  values      ProductVariantAttribute[]

  @@unique([name, productId])
}

model ProductVariantAttribute {
  id                String           @id @default(cuid())
  value             String
  productVariantId  String
  productAttributeId String
  variant           ProductVariant   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  attribute         ProductAttribute @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)

  @@unique([productVariantId, productAttributeId])
}

// Order related models
model Order {
  id              String        @id @default(cuid())
  userId          String
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  total           Decimal       @db.Decimal(10, 2)
  subTotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2)
  shipping        Decimal       @db.Decimal(10, 2)
  discount        Decimal       @db.Decimal(10, 2)
  shippingAddress Json
  billingAddress  Json
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id])
  items           OrderItem[]
  transactions    Transaction[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  metadata    Json?

  // Relations
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Transaction {
  id          String            @id @default(cuid())
  orderId     String
  amount      Decimal           @db.Decimal(10, 2)
  status      TransactionStatus
  provider    String
  reference   String?
  metadata    Json?
  createdAt   DateTime          @default(now())

  // Relations
  order       Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
}

// Cart related models
model Cart {
  id          String     @id @default(cuid())
  userId      String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CartItem[]
}

model CartItem {
  id          String   @id @default(cuid())
  cartId      String
  productId   String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

// Wishlist related models
model Wishlist {
  id          String         @id @default(cuid())
  name        String
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       WishlistItem[]

  @@index([userId])
}

model WishlistItem {
  id          String   @id @default(cuid())
  wishlistId  String
  productId   String
  createdAt   DateTime @default(now())

  // Relations
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
}

// Customer related models
model Address {
  id          String   @id @default(cuid())
  userId      String
  type        AddressType
  name        String?
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  productId   String
  rating      Int
  title       String?
  comment     String?  @db.Text
  status      ReviewStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
  @@index([rating])
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
  MANAGER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}